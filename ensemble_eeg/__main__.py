import os
import shutil
import sys
from pathlib import Path

from ensemble_eeg import ensemble_edf


def _onerror(e):
    raise e


def anonymize_one_edf_file(eeg_path, output_dir, suffix="_ANONYMIZED"):
    """Anonymize one edf file at input_dir using the ensemble_edf
    anonymize_edf_header function. Move the anonymized edf file in
    output_dir.
    The generated edf have an extra '_ANONYMIZED' suffix in their
    name

    Parameters
    ----------
    eeg_path: str
        Path to the edf file to anonymize
    output_dir: str
        Path where the anonymized edf are generated.
    suffix: str
        Extra suffix to add to the generated anonymized edf files.
    """
    # create the output directory if needed
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # anonymize the header using an ensemble_edf function
    ensemble_edf.anonymize_edf_header(eeg_path)
    # path where the anonymized edf is generated by ensemble_edf
    eeg_anon_path = (
        os.path.dirname(eeg_path)
        + os.sep
        + Path(eeg_path).stem
        + "_ANONYMIZED"
        + Path(eeg_path).suffix
    )
    # move the anonymized edf in the output directory
    # and replace ANONYMIZED by the chosen suffix
    eeg_output_path = eeg_anon_path.replace(os.path.dirname(eeg_path), output_dir)
    eeg_output_path = eeg_output_path.replace("ANONYMIZED.", suffix + ".")
    shutil.move(eeg_anon_path, eeg_output_path)


def do_main(*args: str) -> int:
    """Contains flow control"""
    # process command line arguments
    if len(args) < 2:
        print(f"{args[0]}: missing input directory or file operand", file=sys.stderr)
        return 1
    elif len(args) > 3:
        print(f"{args[0]}: too many arguments", file=sys.stderr)
        return 1

    if os.path.isdir(args[1]):
        # the first argument is a directory containing the files to process
        if len(args) > 2 and not os.path.isdir(args[2]):
            # the second argument must be a directory too
            print(f"{args[0]}: '{args[2]}' is not a directory", file=sys.stderr)
            return 1
        try:
            input_files = [
                os.path.join(root, file)
                for root, dirs, files in os.walk(args[1], onerror=_onerror)
                for file in files
            ]
        except OSError as e:
            print(
                f"{args[0]}: Cannot process '{e.filename}': {e.strerror}",
                file=sys.stderr,
            )
            return 2
    else:
        # the first argument is the file to process
        input_files = [args[1]]

    # pseudonymize each input file and write to outptut directory
    for file in input_files:
        print(f"Anonymize {file}...")
        anonymize_one_edf_file(file, args[1])


def main() -> int:
    """Wrap to main()."""
    try:
        return do_main(*sys.argv)
    except KeyboardInterrupt:
        # User has typed CTRL+C
        sys.stdout.write("\n")
        return 130  # 128 + SIGINT


if __name__ == "__main__":
    sys.exit(main())
